#ifndef WINDOW_H
#define WINDOW_H

#include <SDL2/SDL.h>
#include <stdbool.h>

// Ã‰numÃ©ration pour les types de fenÃªtres
typedef enum WindowType {
    WINDOW_TYPE_MAIN,
    WINDOW_TYPE_MINI,
    WINDOW_TYPE_BOTH
} WindowType;

// Structure pour une fenÃªtre
typedef struct GameWindow {
    SDL_Window* window;
    SDL_Renderer* renderer;
    int width;
    int height;
    const char* title;
    Uint32 window_id; // ðŸ†• ID unique de la fenÃªtre SDL
    bool has_focus;   // ðŸ†• Focus de la fenÃªtre
} GameWindow;

// ðŸ†• Structure pour un Ã©vÃ©nement avec contexte de fenÃªtre
typedef struct WindowEvent {
    SDL_Event sdl_event;
    GameWindow* source_window;
    WindowType window_type;
    bool is_valid;
} WindowEvent;

// Fonctions du window manager
bool window_init_sdl(void);
void window_quit_sdl(void);
GameWindow* window_create(const char* title, int width, int height);
void window_destroy(GameWindow* window);
void window_clear(GameWindow* window);
void window_present(GameWindow* window);
SDL_Renderer* window_get_renderer(GameWindow* window);

// Fonctions pour les fenÃªtres spÃ©cifiques
GameWindow* create_mini_window(void);
GameWindow* create_large_window(void);

// SystÃ¨me de fenÃªtres globales pour les scÃ¨nes
void window_initialize_global_windows(void);
void window_cleanup_global_windows(void);
void window_set_active_window(WindowType type);
WindowType window_get_active_window(void);
GameWindow* use_mini_window(void);
GameWindow* use_main_window(void);
GameWindow* use_active_window(void);
bool window_is_window_active(WindowType type);

// ðŸ†• Gestion des Ã©vÃ©nements par fenÃªtre
bool window_poll_events(WindowEvent* window_event);
GameWindow* window_get_by_id(Uint32 window_id);
void window_update_focus(void);
GameWindow* window_get_focused_window(void);
bool window_has_events_pending(void);

#endif // WINDOW_H