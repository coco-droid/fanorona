#ifndef SCENE_H
#define SCENE_H

#include <SDL2/SDL.h>
#include <stdbool.h>

#include "../window/window.h"
#include "../event/event.h"
#include "../ui/ui_tree.h"

// Forward declarations pour Ã©viter les dÃ©pendances circulaires
typedef struct GameCore GameCore;
typedef struct Scene Scene;
typedef struct SceneManager SceneManager;  // ğŸ”§ ADD: Missing forward declaration

// Options de changement de scÃ¨ne
typedef enum SceneTransitionOption {
    SCENE_TRANSITION_REPLACE,          // Remplacer la scÃ¨ne actuelle
    SCENE_TRANSITION_OPEN_NEW_WINDOW,  // Ouvrir une nouvelle fenÃªtre
    SCENE_TRANSITION_CLOSE_AND_OPEN,   // Fermer la fenÃªtre actuelle et en ouvrir une autre
    SCENE_TRANSITION_SWAP_WINDOWS      // Ã‰changer les fenÃªtres des scÃ¨nes
} SceneTransitionOption;

// Structure pour une scÃ¨ne
struct Scene {
    char* id;                           // ğŸ”§ FIX: Changed from const char* to char*
    char* name;                         // ğŸ”§ FIX: Changed from const char* to char*
    WindowType target_window;           // Type de fenÃªtre cible
    EventManager* event_manager;        // Gestionnaire d'Ã©vÃ©nements propre Ã  la scÃ¨ne
    UITree* ui_tree;                    // Arbre UI propre Ã  la scÃ¨ne
    
    void (*init)(struct Scene* scene);
    void (*update)(struct Scene* scene, float delta_time);
    void (*render)(struct Scene* scene, GameWindow* window);
    void (*cleanup)(struct Scene* scene);
    void* data;                         // DonnÃ©es spÃ©cifiques Ã  la scÃ¨ne
    
    bool initialized;                   // Flag indiquant si la scÃ¨ne a Ã©tÃ© initialisÃ©e
    bool active;                        // Flag indiquant si la scÃ¨ne est active
};

// Structure pour gÃ©rer les transitions de scÃ¨ne
typedef struct SceneTransition {
    Scene* new_scene;
    Scene* old_scene;
    SceneTransitionOption option;       // Option de transition
    WindowType target_window;           // FenÃªtre cible pour la transition
} SceneTransition;

// Gestionnaire de scÃ¨nes avec structure corrigÃ©e
typedef struct SceneManager {
    Scene* scenes[16];                  // Tableau des scÃ¨nes disponibles
    int scene_count;                    // Nombre de scÃ¨nes
    
    // ğŸ”§ CORRECTION: Ajouter les champs manquants pour l'ancien API
    Scene* current_scene;               // ScÃ¨ne actuellement active
    Scene* next_scene;                  // Prochaine scÃ¨ne (pour les transitions)
    bool scene_change_requested;       // Flag de changement de scÃ¨ne requis
    
    Scene* active_scenes[WINDOW_TYPE_BOTH + 1]; // ScÃ¨nes actives par fenÃªtre
    
    SceneTransition* transitions;       // Transitions en cours
    size_t transition_count;
    size_t transition_capacity;
    
    GameCore* core;                     // RÃ©fÃ©rence au core pour les callbacks
} SceneManager;

// Fonctions du gestionnaire de scÃ¨nes - SIGNATURES CORRIGÃ‰ES
SceneManager* scene_manager_create(void);  // ğŸ”§ CORRECTION: Pas de paramÃ¨tre GameCore
void scene_manager_destroy(SceneManager* manager);

// Gestion des scÃ¨nes
Scene* scene_create(const char* id, const char* name, WindowType target_window);
void scene_destroy(Scene* scene);
void scene_initialize(Scene* scene);

// Enregistrement et activation des scÃ¨nes
bool scene_manager_register_scene(SceneManager* manager, Scene* scene);
bool scene_manager_set_scene(SceneManager* manager, Scene* scene);
bool scene_manager_set_scene_for_window(SceneManager* manager, Scene* scene, WindowType window_type);
bool scene_manager_transition_to_scene(SceneManager* manager, const char* scene_id, 
                                     SceneTransitionOption option);

// RÃ©cupÃ©ration des scÃ¨nes
Scene* scene_manager_get_scene_by_id(SceneManager* manager, const char* id);
Scene* scene_manager_get_active_scene(SceneManager* manager);
Scene* scene_manager_get_active_scene_for_window(SceneManager* manager, WindowType window_type);

// ğŸ”§ CORRECTION: Ajouter la fonction manquante
Scene* scene_manager_get_current_scene(SceneManager* manager);

// Mise Ã  jour et rendu
void scene_manager_update(SceneManager* manager, float delta_time);
void scene_manager_render_main(SceneManager* manager);
void scene_manager_render_mini(SceneManager* manager);

// Gestion des Ã©vÃ©nements
void scene_manager_dispatch_event(SceneManager* manager, WindowEvent* event);

// ScÃ¨nes existantes (Ã  adapter plus tard)
Scene* create_main_menu_scene(void);
Scene* create_game_scene(void);
Scene* create_home_scene(void);
Scene* create_menu_scene(void);  // ğŸ†• Ajout de la dÃ©claration pour la nouvelle scÃ¨ne menu
Scene* create_ai_scene(void);    // ğŸ†• Ajout de la dÃ©claration pour la scÃ¨ne de configuration IA
Scene* create_profile_scene(void); // ğŸ†• Ajout de la dÃ©claration pour profile_scene
Scene* create_choice_scene(void);  // ğŸ†• Ajout de la dÃ©claration pour choice_scene
Scene* create_wiki_scene(void);    // ğŸ†• Ajout de la dÃ©claration pour wiki_scene
Scene* create_pieces_scene(void);  // ğŸ†• Ajout de la dÃ©claration pour pieces_scene
Scene* create_net_start_scene(void);
Scene* create_lobby_scene(void);
Scene* create_player_list_scene(void);  // ğŸ†• ADD

// Fonction spÃ©ciale pour connecter les Ã©vÃ©nements aprÃ¨s crÃ©ation du core
void home_scene_connect_events(Scene* scene, GameCore* core);
void menu_scene_connect_events(Scene* scene, GameCore* core);
void game_scene_connect_events(Scene* scene, GameCore* core);
void ai_scene_connect_events(Scene* scene, GameCore* core);
void profile_scene_connect_events(Scene* scene, GameCore* core);
void choice_scene_connect_events(Scene* scene, GameCore* core);
void wiki_scene_connect_events(Scene* scene, GameCore* core);
void pieces_scene_connect_events(Scene* scene, GameCore* core);
void net_start_scene_connect_events(Scene* scene, GameCore* core);
void lobby_scene_connect_events(Scene* scene, GameCore* core);
void player_list_scene_connect_events(Scene* scene, GameCore* core);  // ğŸ†• ADD
// ğŸ†• Associer le core au manager pour les transitions automatiques
void scene_manager_set_core(SceneManager* manager, GameCore* core);
void scene_manager_set_core(SceneManager* manager, GameCore* core);
#endif // SCENE_H
